name: Hola Mundo

# cuando ejecutamos push ejecutamos nuestro workflow en este caso
# on: [push, pull_request] # evento: cuando hacemos push en nuestro repositorio

# si queremos tener mas control en los eventos:
on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

jobs: # nos va a permitir ejecutar todo lo que necesitamos dentro de algÃºn servidor
  # los jobs se ejecutan directamente dentro de un servidor, y action nos provee varios servidores (mac, ubuntu, etc)
  hola: # damos un nombre representativo
    runs-on: ubuntu-latest # con runs-on especificamos el sistema operativo en el que queremos ejecutar el job. en este caso seleccionamos ubuntu en su ultima versiÃ³n

    steps: # definimos a los steps, que son la unidad mas pequeÃ±a, que nos van a permitir realizar diferentes acciones
      # definimos todos los steps que necesitamos (una lista de esteps):
      - name: Hola Mundo # nombre de la lista
        run: echo "Hola Mundo" # run nos permite ejecutar un comando

      # podemos agregar mas steps
      - name: touch file
        run: touch hola.txt

      - name: Set text
        run: echo "Hola Mundo" >> hola.txt

      - name: Read file
        run: cat hola.txt

  other:
    runs-on: ubuntu-latest # cada job se ejecuta dentro de un servidor, por eso se debe definir run on en cada jon
    needs: hola # generamos una dependencia para que este job se ejecute despues del job hola

    steps:
      - name: LS # nombre del step
        run: ls -al
# Lo que estÃ¡s viendo es parte de un archivo de configuraciÃ³n de GitHub Actions, una herramienta de integraciÃ³n continua (CI/CD) que permite automatizar tareas en tus proyectos, como pruebas, despliegues o simplemente ejecutar comandos.
# En ese contexto, los steps son pasos individuales dentro de un "job" (trabajo) de GitHub Actions. Y el campo run se usa para ejecutar comandos de terminal (como si estuvieras escribiÃ©ndolos en la consola).

# run: echo "Hola Mundo"
#ğŸ”¹ QuÃ© hace: imprime el texto "Hola Mundo" en la consola.
#ğŸ”¹ Comando echo: sirve para mostrar texto en la terminal.

# ğŸ“Œ Paso 2: ->   run: touch hola.txt
# ğŸ”¹ QuÃ© hace: crea un archivo vacÃ­o llamado hola.txt.
# ğŸ”¹ Comando touch: se usa en Unix/Linux para crear archivos nuevos (vacÃ­os) si no existen.

# ğŸ“Œ Paso 3: ->   run: echo "Hola Mundo" >> hola.txt
# ğŸ”¹ QuÃ© hace: escribe "Hola Mundo" dentro del archivo hola.txt.
# ğŸ”¹ El >> significa: agregar contenido al final del archivo.

# ğŸ“Œ Paso 4:  run: cat hola.txt
# ğŸ”¹ QuÃ© hace: muestra en consola el contenido del archivo hola.txt.
# ğŸ”¹ Comando cat: significa "concatenate and display", y se usa para ver archivos de texto desde la terminal.

